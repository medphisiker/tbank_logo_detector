#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ COCO –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç Label Studio JSON.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç label-studio-converter –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è COCO —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç,
–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Label Studio.
"""

import subprocess
import sys
import json
from pathlib import Path

def check_and_install_converter():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç label-studio-converter –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ label-studio-converter
        result = subprocess.run(['label-studio-converter', '--help'],
                              capture_output=True, text=True)
        if result.returncode != 0:
            print("üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é label-studio-converter...")
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º uv sync
            install_result = subprocess.run(['uv', 'sync'], capture_output=True, text=True)
            
            if install_result.returncode != 0:
                # –ï—Å–ª–∏ uv sync –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º uv add
                install_result = subprocess.run(['uv', 'add', 'label-studio-converter'],
                                              capture_output=True, text=True)
                
                if install_result.returncode != 0:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ uv: {install_result.stderr}")
                    return False
            
            print("‚úÖ label-studio-converter —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return True
        return True
    except FileNotFoundError:
        print("üîß label-studio-converter –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —á–µ—Ä–µ–∑ uv...")
        # –ü—Ä–æ–±—É–µ–º uv sync
        install_result = subprocess.run(['uv', 'sync'], capture_output=True, text=True)
        
        if install_result.returncode != 0:
            # –ï—Å–ª–∏ uv sync –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º uv add
            install_result = subprocess.run(['uv', 'add', 'label-studio-converter'],
                                          capture_output=True, text=True)
            
            if install_result.returncode != 0:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ uv: {install_result.stderr}")
                return False
        
        print("‚úÖ label-studio-converter —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return True

def convert_coco_to_labelstudio(input_file: str, output_file: str) -> bool:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç COCO –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ Label Studio JSON —Ñ–æ—Ä–º–∞—Ç.

    Args:
        input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É COCO —Ñ–∞–π–ª—É
        output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É Label Studio JSON —Ñ–∞–π–ª—É

    Returns:
        True –µ—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        input_path = Path(input_file)
        if not input_path.exists():
            print(f"‚ùå –û—à–∏–±–∫–∞: –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
            return False

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        output_path = Path(output_file)
        output_path.parent.mkdir(parents=True, exist_ok=True)

        print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è COCO —Ñ–∞–π–ª–∞: {input_file}")
        print(f"üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º label-studio-converter
        result = subprocess.run([
            'label-studio-converter', 'import', 'coco',
            '-i', str(input_path),
            '-o', str(output_path)
        ], capture_output=True, text=True)

        if result.returncode == 0:
            print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {output_file}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {result.stderr}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")
        return False


def fix_image_paths(json_file: str, dataset_name: str = "tbank_official_logos") -> bool:
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤ Label Studio JSON —Ñ–∞–π–ª–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É.

    Args:
        json_file: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
        dataset_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "tbank_official_logos")

    Returns:
        True –µ—Å–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        json_path = Path(json_file)
        if not json_path.exists():
            print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file}")
            return False

        # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        corrected_count = 0
        for item in data:
            if 'data' in item and 'image' in item['data']:
                old_path = item['data']['image']
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –ø—É—Ç–∏
                if '\\images/' in old_path:
                    filename = old_path.split('\\images/')[-1]
                elif '/images/' in old_path:
                    filename = old_path.split('/images/')[-1]
                else:
                    # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /images/, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø—É—Ç–∏
                    filename = old_path.split('/')[-1] if '/' in old_path else old_path.split('\\')[-1]
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Label Studio local files
                new_path = f"/data/local-files/?d=label-studio/data/local/{dataset_name}/images/{filename}"
                item['data']['image'] = new_path
                corrected_count += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JSON —Ñ–∞–π–ª
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º: {corrected_count}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—É—Ç–µ–π: {str(e)}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("üöÄ Label Studio COCO Converter")
    print("=" * 40)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º label-studio-converter
    if not check_and_install_converter():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å label-studio-converter. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é:")
        print("   pip install label-studio-converter")
        sys.exit(1)

    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    input_file = "data/tbank_official_logos/refs_ls_coco.json"
    output_file = "data/tbank_official_logos/label_studio_annotations.json"

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    success = convert_coco_to_labelstudio(input_file, output_file)

    if success:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º...")
        fix_success = fix_image_paths(output_file)
        
        if fix_success:
            print("‚úÖ –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        else:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º. –§–∞–π–ª –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.")
        
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Label Studio –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–∞—à –ø—Ä–æ–µ–∫—Ç")
        print("3. –ù–∞–∂–º–∏—Ç–µ Import > Upload Files")
        print(f"4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª: {output_file}")
        print("5. –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –±—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤–º–µ—Å—Ç–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    else:
        print("\n‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("- –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ label-studio-converter: uv sync –∏–ª–∏ uv add label-studio-converter")
        print("- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º")
        print("- –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ COCO —Ñ–∞–π–ª–∞")
        sys.exit(1)

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ tbank_logo_detector –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Colab.

–ß–∏—Ç–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ data_config.json, –≥–¥–µ —É–∫–∞–∑–∞–Ω—ã –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data/ (data_sirius, tbank_official_logos, data_synt) –∏ –ª–∏–º–∏—Ç—ã —Ñ–∞–π–ª–æ–≤ (null –¥–ª—è –≤—Å–µ–π –ø–∞–ø–∫–∏, —á–∏—Å–ª–æ –¥–ª—è –ø–æ–¥–≤—ã–±–æ—Ä–∫–∏).
–°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ ZIP –∞—Ä—Ö–∏–≤—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π data/ (—Å –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–æ–¥–≤—ã–±–æ—Ä–∫–æ–π —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏—Ö –≤ –ø–∞–ø–∫—É tbank_logo_detector_data –¥–ª—è —É–¥–æ–±–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive.
–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö.
"""

import json
import random
import shutil
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict


def create_archive_for_subdir(
    subdir: str,
    project_root: Path,
    colab_data_dir: Path,
    limit: Optional[int] = None
) -> Optional[str]:
    """
    –°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≤–æ–∑–º–æ–∂–Ω–æ —Å –ø–æ–¥–≤—ã–±–æ—Ä–∫–æ–π —Ñ–∞–π–ª–æ–≤.

    Args:
        subdir: –ò–º—è –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ project_root)
        project_root: –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        colab_data_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–æ–≤
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (None –¥–ª—è –≤—Å–µ—Ö)

    Returns:
        –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∞—Ä—Ö–∏–≤—É –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å
    """
    source_path = project_root / "data" / subdir

    if not (source_path.exists() and source_path.is_dir()):
        print(f"‚ö† –ü–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {subdir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return None

    try:
        print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {subdir}")

        # –°–æ–∑–¥–∞–µ–º –∏–º—è –∞—Ä—Ö–∏–≤–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        zip_base_name = colab_data_dir / f"{subdir}_{timestamp}"

        if limit is None:
            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤—Å—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            print(f"–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: {zip_base_name}.zip")
            print(f"–ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {source_path}")
            
            shutil.make_archive(str(zip_base_name), 'zip', str(source_path))
            
            zip_path = zip_base_name.with_suffix('.zip')
        else:
            # –ü–æ–¥–≤—ã–±–æ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
            all_files = list(source_path.rglob('*'))
            files_to_include = [f for f in all_files if f.is_file()]
            
            num_files = len(files_to_include)
            if limit >= num_files:
                print(f"–õ–∏–º–∏—Ç {limit} >= {num_files}, –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã")
                limit = None  # –§–æ–ª–±—ç–∫ –Ω–∞ –ø–æ–ª–Ω—ã–π –∞—Ä—Ö–∏–≤
                shutil.make_archive(str(zip_base_name), 'zip', str(source_path))
                zip_path = zip_base_name.with_suffix('.zip')
            else:
                random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
                selected_files = random.sample(files_to_include, limit)
                print(f"–í—ã–±—Ä–∞–Ω–æ {limit} —Ñ–∞–π–ª–æ–≤ –∏–∑ {num_files} –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è")
                
                temp_dir = colab_data_dir / f"temp_{subdir}_{timestamp}"
                temp_dir.mkdir(exist_ok=True)
                
                for file_path in selected_files:
                    rel_path = file_path.relative_to(source_path)
                    dest_path = temp_dir / rel_path
                    dest_path.parent.mkdir(parents=True, exist_ok=True)
                    shutil.copy2(file_path, dest_path)
                    print(f"  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {rel_path}")
                
                # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º temp_dir
                shutil.make_archive(str(zip_base_name), 'zip', str(temp_dir))
                shutil.rmtree(temp_dir)  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                
                zip_path = zip_base_name.with_suffix('.zip')

        archive_size = zip_path.stat().st_size / (1024 * 1024)  # –†–∞–∑–º–µ—Ä –≤ –ú–ë
        print(f"–†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {archive_size:.1f} –ú–ë")
        
        print(f"‚úì –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {zip_path.name}")
        
        return str(zip_path)
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è {subdir}: {e}")
        return None


def prepare_data_for_colab():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Google Colab.

    –ß–∏—Ç–∞–µ—Ç data_config.json –∏ —Å–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    project_root = Path.cwd()

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Colab
    colab_data_dir = project_root / "tbank_logo_detector_data"
    colab_data_dir.mkdir(exist_ok=True)
    print(f"–°–æ–∑–¥–∞–Ω–∞/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞: {colab_data_dir}")

    # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = project_root / "data_config.json"
    if not config_path.exists():
        print("‚ùå –§–∞–π–ª data_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
        return []

    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config: Dict[str, Optional[int]] = json.load(f)
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è data_config.json: {e}")
        return []

    created_archives = []

    for subdir, limit in config.items():
        archive = create_archive_for_subdir(subdir, project_root, colab_data_dir, limit=limit)
        if archive:
            created_archives.append(archive)

    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"\n{'='*50}")
    print("–ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–ê")
    print(f"{'='*50}")

    if created_archives:
        print(f"\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã –≤ –ø–∞–ø–∫–µ {colab_data_dir}:")
        for archive in created_archives:
            archive_path = Path(archive)
            size_mb = archive_path.stat().st_size / (1024 * 1024)
            print(f"  - {archive_path.name}: {size_mb:.1f} –ú–ë")
        print("\nüìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–∞–ø–∫—É tbank_logo_detector_data –Ω–∞ Google Drive")
        print("üìì –ó–∞—Ç–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –µ–µ –∫ Google Colab –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YOLOE –∏ GROUNDING DINO")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π)")

    return created_archives


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä–∏–ø—Ç."""
    print("üöÄ –ù–ê–ß–ê–õ–û –ü–û–î–ì–û–¢–û–í–ö–ò –î–ê–ù–ù–´–• –î–õ–Ø GOOGLE COLAB")
    print("=" * 50)

    try:
        archives = prepare_data_for_colab()
        if archives:
            print("\n‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return 0
        else:
            print("\n‚ö† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –∞—Ä—Ö–∏–≤—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ data_config.json)")
            return 0  # –ù–µ –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    exit(main())
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ tbank_logo_detector –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Colab.

–°–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏—Ö –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —É–¥–æ–±–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive.
"""

import os
import shutil
import zipfile
from pathlib import Path
from datetime import datetime


def create_zip_archive(source_dir: str, zip_name: str, output_dir: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.

    Args:
        source_dir: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        zip_name: –ò–º—è ZIP —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
        output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞

    Returns:
        –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∞—Ä—Ö–∏–≤—É
    """
    source_path = Path(source_dir)
    if not source_path.exists():
        raise FileNotFoundError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {source_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # –°–æ–∑–¥–∞–µ–º –∏–º—è –∞—Ä—Ö–∏–≤–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    zip_filename = f"{zip_name}_{timestamp}.zip"
    zip_path = Path(output_dir) / zip_filename

    print(f"–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: {zip_path}")
    print(f"–ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {source_path}")

    # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zip_file:
        for file_path in source_path.rglob('*'):
            if file_path.is_file():
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤ —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –ø—É—Ç–µ–º
                arcname = file_path.relative_to(source_path.parent)
                zip_file.write(file_path, arcname)
                print(f"  –î–æ–±–∞–≤–ª–µ–Ω: {arcname}")

    archive_size = zip_path.stat().st_size / (1024 * 1024)  # –†–∞–∑–º–µ—Ä –≤ –ú–ë
    print(f"–†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {archive_size:.1f} –ú–ë")
    return str(zip_path)


def prepare_data_for_colab():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Google Colab.
    """
    project_root = Path.cwd()

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Colab
    colab_data_dir = project_root / "tbank_logo_detector_data"
    colab_data_dir.mkdir(exist_ok=True)
    print(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {colab_data_dir}")

    # –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
    data_dirs = [
        ("data/tbank_official_logos", "tbank_official_logos"),
        ("data/data_sirius", "data_sirius")
    ]

    created_archives = []

    for source_dir, zip_name in data_dirs:
        source_path = project_root / source_dir

        if source_path.exists():
            try:
                print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {source_dir}")
                zip_path = create_zip_archive(str(source_path), zip_name, str(colab_data_dir))
                created_archives.append(zip_path)
                print(f"‚úì –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {Path(zip_path).name}")
            except Exception as e:
                print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è {source_dir}: {e}")
        else:
            print(f"‚ö† –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {source_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"\n{'='*50}")
    print("–ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–ê")
    print(f"{'='*50}")

    if created_archives:
        print(f"\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã –≤ –ø–∞–ø–∫–µ {colab_data_dir}:")
        for archive in created_archives:
            archive_path = Path(archive)
            size_mb = archive_path.stat().st_size / (1024 * 1024)
            print(f"  - {archive_path.name}: {size_mb:.1f} –ú–ë")
        print("\nüìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–∞–ø–∫—É tbank_logo_detector_data –Ω–∞ Google Drive")
        print("üìì –ó–∞—Ç–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –µ–µ –∫ Google Colab –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YOLOE –∏ GROUNDING DINO")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞")

    return created_archives


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä–∏–ø—Ç."""
    print("üöÄ –ù–ê–ß–ê–õ–û –ü–û–î–ì–û–¢–û–í–ö–ò –î–ê–ù–ù–´–• –î–õ–Ø GOOGLE COLAB")
    print("=" * 50)

    try:
        archives = prepare_data_for_colab()
        if archives:
            print("\n‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return 0
        else:
            print("\n‚ùå –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    exit(main())